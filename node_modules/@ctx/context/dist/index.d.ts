/**
 * A Context carries a deadline, a cancelation signal, and other values across
 * API boundaries.
 */
export interface Context {
    /**
     * Done returns a promise that's resolved when the work done on behalf of
     * this context should be canceled. Successive calls to Done return the same
     * value.
     *
     * WithCancel arranges for Done to be resolved when cancel is called;
     * WithDeadline arranges for Done to be resolved when the deadline expires;
     * WithTimeout arranges for Done to be closed when the timeout elapses.
     */
    Done(): Promise<{}>;
    /**
     * Deadline returns the date when the work done on behalf of this context
     * should be canceled. Deadline returns undefined when no deadline is set.
     * Successive calls to Deadline return the same result.
     */
    Deadline(): Date | undefined;
    /**
     * Timeout returns the timeout in milliseconds from now when the work done on
     * behalf of this context should be cancelled. Timeout returns undefined when
     * no deadline is set.
     */
    Timeout(): number | undefined;
    /**
     * Err returns an Error value after Done is resolved. Err returnes Cancelled
     * if the context was canceled or DeadlineExceeded if the context's deadline
     * passed. No other values for Err are defined. After Done is resolved,
     * successive calls to Err return the same result.
     */
    Err(): Error | undefined;
    /**
     * Value returns the value associated with this context for key, or undefined
     * if no value is associated with key. Successive calls to Value with the
     * same key returns the same result.
     *
     * Use context values only for request-scoped data that transits processes
     * and API boundaries, not for passing optional parameters to functions.
     *
     * A key identifies a specific value in a Context. Functions that wish to
     * store values in Context typically use a key prefixed with
     * `__filename` to ensure uniqueness.
     *
     * Packages that define a Context key should provide type-safe accessors for
     * the values stored using that key.
     */
    Value(key: string): any;
}
/**
 * Canceled is the error returned by Context.Err when the context is canceled.
 */
export declare const Canceled: Error;
/**
 * DeadlineExceeded is the error returned by Context.Err when the context's
 * deadline passes.
 */
export declare const DeadlineExceeded: Error;
/**
 * Background returns a empty Context. It is never canceled, has no values,
 * and has no deadline. It is typically used by the main function,
 * initialization, and tests, and as the top-level Context for incoming
 * requests.
 */
export declare function Background(): Context;
/**
 * TODO returns a empty Context. Code should use context.TODO when it's unclear
 * which Context to use or it is not yet available (because the surrounding
 * function has not yet been extended to accept a Context parameter). TODO is
 * recognized by static analysis tools that determine whether Contexts are
 * propagated correctly in a program.
 */
export declare function TODO(): Context;
/**
 * WithCancel returns a copy of parent with a new Done promise. The returned
 * context's Done promise is resolved when the returned cancel function is
 * called or when the parent context's Done promsie is resolved, whichever
 * happens first.
 *
 * Canceling this context releases resources associated with it, so code
 * should call cancel as soon as the operations running in this Context
 * complete.
 *
 * @param ctx The parent promise
 */
export declare function WithCancel(ctx: Context): [Context, () => void];
/**
 * WithTimeout returns WithDeadline(parent, Date.now() + timeout).
 *
 * Canceling this context releases resources associated with it, so code should
 * call cancel as soon as the operations running in this Context complete.
 *
 * @param ctx The parent context
 * @param timeoutMilliseconds The number of milliseconds before the deadline
 *                            will be exceeded
 */
export declare function WithTimeout(ctx: Context, timeoutMilliseconds: number): [Context, () => void];
/**
 * WithDeadline returns a copy of the parent context with the deadline adjusted
 * to be no later than `deadline`. If the parent's deadline is already earlier
 * than `deadline`, `WithDeadline(parent, deadline)` is semantically equivalent
 * to parent. The returned context's Done promise is resolved when the deadline
 * expires, when the returned cancel function is called, or when the parent
 * context's Done promise is resolved, whichever happens first.
 *
 * Canceling this context releases resources associated with it, so code should
 * call cancel as soon as the operations running in this Context complete.
 *
 * @param ctx The parent context
 * @param deadline The date when the deadline will be exceeded
 */
export declare function WithDeadline(ctx: Context, deadline: Date): [Context, () => void];
/**
 * WithValue returns a copy of parent in which the value associated with key is
 * val.
 *
 * Use context Values only for request-scoped data that transits processes and
 * APIs, not for passing optional parameters to functions.
 *
 * @param ctx The parent context
 * @param key The key associated with val in the returned context
 * @param val The value associated with key in the returned context
 */
export declare function WithValue(ctx: Context, key: string, value: any): [Context, () => void];
