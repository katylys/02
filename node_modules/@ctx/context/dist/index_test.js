"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var context = require("./index");
var chai_1 = require("chai");
describe('context.Background()', function () {
    it('has no deadline', function () {
        var ctx = context.Background();
        chai_1.expect(ctx.Deadline()).to.equal(undefined);
    });
    it('is not cancelled', function () {
        var ctx = context.Background();
        chai_1.expect(ctx.Err()).to.equal(undefined);
    });
});
describe('context.WithCancel()', function () {
    it('is not cancelled', function () {
        var _a = context.WithCancel(context.Background()), ctx = _a[0], cancel = _a[1];
        chai_1.expect(ctx.Err()).to.equal(undefined);
    });
    it('can be cancelled', function () {
        var _a = context.WithCancel(context.Background()), ctx = _a[0], cancel = _a[1];
        cancel();
        chai_1.expect(ctx.Err()).to.equal(context.Canceled);
    });
    describe('when the parent is cancelled previously', function () {
        var _a = context.WithCancel(context.Background()), ctx = _a[0], cancel = _a[1];
        cancel();
        var _b = context.WithCancel(ctx), childCtx = _b[0], childCancel = _b[1];
        it('the child should be cancelled', function () {
            chai_1.expect(childCtx.Err()).to.equal(context.Canceled);
        });
        it('the child can be cancelled', function () {
            childCancel();
            chai_1.expect(childCtx.Err()).to.equal(context.Canceled);
        });
    });
    describe('when the parent is cancelled', function () {
        var _a = context.WithCancel(context.Background()), ctx = _a[0], cancel = _a[1];
        var _b = context.WithCancel(ctx), childCtx = _b[0], childCancel = _b[1];
        it('the child should be cancelled', function () {
            return Promise.all([childCtx.Done(), after(1).then(cancel)]);
        });
    });
});
describe('context.WithTimeout()', function () {
    describe('when the parent is not cancelled', function () {
        it('has a positive timeout', function () {
            var _a = context.WithTimeout(context.Background(), 10), ctx = _a[0], cancel = _a[1];
            var timeout = ctx.Timeout();
            chai_1.expect(timeout).to.not.equal(undefined);
            chai_1.expect(timeout).to.be.greaterThan(0);
        });
        it('is not initially cancelled', function () {
            var _a = context.WithTimeout(context.Background(), 10), ctx = _a[0], cancel = _a[1];
            chai_1.expect(ctx.Err()).to.equal(undefined);
        });
        it('is cancelled after the timeout', function (done) {
            var _a = context.WithTimeout(context.Background(), 10), ctx = _a[0], cancel = _a[1];
            setTimeout(function () {
                chai_1.expect(ctx.Err()).to.equal(context.DeadlineExceeded);
                done();
            }, 20);
        });
    });
});
function after(timeoutMilliseconds) {
    return new Promise(function (resolve) {
        setTimeout(resolve, timeoutMilliseconds);
    });
}
