"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var expressCtx = require("./index");
var axios_1 = require("axios");
var chai_1 = require("chai");
describe('expressCtx.closeNotify', function () {
    var timeout = 50;
    it('cancels the context when the request is cancelled', function () { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        var app, server, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    app = express();
                    app.use(expressCtx.closeNotify());
                    app.get('/canceled', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, req.ctx.Done()];
                                case 1:
                                    _a.sent();
                                    res.end();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    server = app.listen(0);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, axios_1.default("http://localhost:" + server.address().port + "/canceled", {
                            cancelToken: new axios_1.default.CancelToken(function (c) {
                                setTimeout(c, timeout);
                            })
                        })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
});
describe('expressCtx.timeout', function () {
    var timeout = 100;
    it('attaches a context', function () { return __awaiter(_this, void 0, void 0, function () {
        var app, server;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    app = express();
                    app.use(expressCtx.timeout(timeout));
                    app.get('/attaches', function (req, res) {
                        chai_1.expect(req.ctx).to.not.equal(undefined);
                        res.end();
                    });
                    server = app.listen(0);
                    return [4 /*yield*/, axios_1.default("http://localhost:" + server.address().port + "/attaches")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('cancels the context after the timeout', function () { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        var app, server;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    app = express();
                    app.use(expressCtx.timeout(timeout));
                    app.get('/cancels', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
                        var started, duration;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    started = Date.now();
                                    return [4 /*yield*/, req.ctx.Done()];
                                case 1:
                                    _a.sent();
                                    duration = Date.now() - started;
                                    chai_1.expect(duration).to.be.lessThan(timeout * 1.05); // Node's timing is not particularly accurate
                                    res.end();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    server = app.listen(0);
                    return [4 /*yield*/, axios_1.default("http://localhost:" + server.address().port + "/cancels")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('expressCtx.readHeaders', function () {
    it('reads present headers', function () { return __awaiter(_this, void 0, void 0, function () {
        var app, server;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    app = express();
                    app.use(expressCtx.readHeaders(['foo']));
                    app.get('/present', function (req, res) {
                        chai_1.expect(req.ctx.Value('foo')).to.equal('bar');
                        res.end();
                    });
                    server = app.listen(0);
                    return [4 /*yield*/, axios_1.default("http://localhost:" + server.address().port + "/present", {
                            headers: {
                                foo: 'bar'
                            }
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
